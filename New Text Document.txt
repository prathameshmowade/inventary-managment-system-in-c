#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// --- Inventory Management ---

typedef struct {
    int code;
    char name[50];
    int quantity;
    float price;
} Product;

void addProduct(Product inventory[], int *count) {
    printf("Enter product code: ");
    scanf("%d", &inventory[*count].code);
    printf("Enter product name: ");
    scanf("%s", inventory[*count].name);
    printf("Enter product quantity: ");
    scanf("%d", &inventory[*count].quantity);
    printf("Enter product price: ");
    scanf("%f", &inventory[*count].price);
    (*count)++;
}

Product* searchByCode(Product inventory[], int count, int code) {
    for (int i = 0; i < count; i++) {
        if (inventory[i].code == code) {
            return &inventory[i];
        }
    }
    return NULL;
}

void displayInventory(Product inventory[], int count) {
    printf("\n--- Inventory ---\n");
    for (int i = 0; i < count; i++) {
        printf("Code: %d, Name: %s, Quantity: %d, Price: %.2f\n", 
               inventory[i].code, inventory[i].name, inventory[i].quantity, inventory[i].price);
    }
}

// --- Sorting and Searching Algorithms ---

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

int linearSearch(int arr[], int n, int key) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == key) {
            return i;
        }
    }
    return -1;
}

// --- Stack Implementation ---

#define MAX 100
int stack[MAX];
int top = -1;

void push(int value) {
    if (top == MAX - 1) {
        printf("Stack overflow\n");
    } else {
        stack[++top] = value;
    }
}

int pop() {
    if (top == -1) {
        printf("Stack underflow\n");
        return -1;
    }
    return stack[top--];
}

// --- Queue Implementation ---

int queue[MAX];
int front = -1, rear = -1;

void enqueue(int value) {
    if (rear == MAX - 1) {
        printf("Queue overflow\n");
    } else {
        if (front == -1) {
            front = 0;
        }
        queue[++rear] = value;
    }
}

int dequeue() {
    if (front == -1 || front > rear) {
        printf("Queue underflow\n");
        return -1;
    }
    return queue[front++];
}

// --- Linked List Implementation ---

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertNode(Node** head, int data) {
    Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

void traverseList(Node* head) {
    while (head) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

void deleteNode(Node** head, int key) {
    Node* temp = *head;
    Node* prev = NULL;
    if (temp != NULL && temp->data == key) {
        *head = temp->next;
        free(temp);
        return;
    }
    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) return;
    prev->next = temp->next;
    free(temp);
}

// --- Binary Tree Implementation ---

typedef struct TreeNode {
    int data;
    struct TreeNode *left, *right;
} TreeNode;

TreeNode* insertTreeNode(TreeNode* node, int data) {
    if (node == NULL) {
        TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
        newNode->data = data;
        newNode->left = newNode->right = NULL;
        return newNode;
    }
    if (data < node->data) {
        node->left = insertTreeNode(node->left, data);
    } else {
        node->right = insertTreeNode(node->right, data);
    }
    return node;
}

void inOrderTraversal(TreeNode* root) {
    if (root != NULL) {
        inOrderTraversal(root->left);
        printf("%d ", root->data);
        inOrderTraversal(root->right);
    }
}

// --- DFS and BFS Implementation ---

void DFS(int graph[5][5], int visited[], int node) {
    visited[node] = 1;
    printf("%d ", node);
    for (int i = 0; i < 5; i++) {
        if (graph[node][i] == 1 && !visited[i]) {
            DFS(graph, visited, i);
        }
    }
}

void BFS(int graph[5][5], int start) {
    int visited[5] = {0};
    int queue[5], front = -1, rear = -1;
    visited[start] = 1;
    printf("%d ", start);
    queue[++rear] = start;
    while (front < rear) {
        int node = queue[++front];
        for (int i = 0; i < 5; i++) {
            if (graph[node][i] == 1 && !visited[i]) {
                visited[i] = 1;
                printf("%d ", i);
                queue[++rear] = i;
            }
        }
    }
}

// --- Hash Table Implementation ---

#define SIZE 10
int hashTable[SIZE];

int hashFunction(int key) {
    return key % SIZE;
}

void insertHash(int key) {
    int index = hashFunction(key);
    while (hashTable[index] != -1) {
        index = (index + 1) % SIZE; // Linear probing
    }
    hashTable[index] = key;
}

void displayHashTable() {
    printf("Hash Table: ");
    for (int i = 0; i < SIZE; i++) {
        if (hashTable[i] != -1) {
            printf("%d ", hashTable[i]);
        }
    }
    printf("\n");
}

// --- Main Function ---

int main() {
    Product inventory[100];
    int inventoryCount = 0;

    int choice;

    while (1) {
        printf("\n1. Add Product\n2. Search Product\n3. Display Inventory\n4. Sort Inventory\n5. Stack Operations\n6. Queue Operations\n7. Linked List Operations\n8. Binary Tree Operations\n9. Graph DFS and BFS\n10. Hash Table Operations\n0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addProduct(inventory, &inventoryCount);
                break;
            case 2: {
                int code;
                printf("Enter product code to search: ");
                scanf("%d", &code);
                Product* foundProduct = searchByCode(inventory, inventoryCount, code);
                if (foundProduct) {
                    printf("Product found: %s, Quantity: %d, Price: %.2f\n", 
                           foundProduct->name, foundProduct->quantity, foundProduct->price);
                } else {
                    printf("Product not found.\n");
                }
                break;
            }
            case 3:
                displayInventory(inventory, inventoryCount);
                break;
            case 4: {
                int arr[] = {64, 34, 25, 12, 22, 11, 90};
                int n = sizeof(arr) / sizeof(arr[0]);
                bubbleSort(arr, n);
                printf("Sorted array (Bubble Sort): ");
                for (int i = 0; i < n; i++) {
                    printf("%d ", arr[i]);
                }
                printf("\n");
                break;
            }
            case 5: {
                int stackChoice, value;
                printf("1. Push\n2. Pop\nChoose operation: ");
                scanf("%d", &stackChoice);
                if (stackChoice == 1) {
                    printf("Enter value to push: ");
                    scanf("%d", &value);
                    push(value);
                } else if (stackChoice == 2) {
                    printf("Popped from stack: %d\n", pop());
                }
                break;
            }
            case 6: {
                int queueChoice, value;
                printf("1. Enqueue\n2. Dequeue\nChoose operation: ");
                scanf("%d", &queueChoice);
                if (queueChoice == 1) {
                    printf("Enter value to enqueue: ");
                    scanf("%d", &value);
                    enqueue(value);
                } else if (queueChoice == 2) {
                    printf("Dequeued from queue: %d\n", dequeue());
                }
                break;
            }
            case 7: {
                int linkedListChoice, value;
                Node* head = NULL;
                printf("1. Insert Node\n2. Traverse List\n3. Delete Node\nChoose operation: ");
                scanf("%d", &linkedListChoice);
                if (linkedListChoice == 1) {
                    printf("Enter value to insert: ");
                    scanf("%d", &value);
                    insertNode(&head, value);
                } else if (linkedListChoice == 2) {
                    traverseList(head);
                } else if (linkedListChoice == 3) {
                    printf("Enter value to delete: ");
                    scanf("%d", &value);
                    deleteNode(&head, value);
                }
                break;
            }
            case 8: {
                TreeNode* root = NULL;
                int treeChoice, value;
                printf("1. Insert Node\n2. In-Order Traversal\nChoose operation: ");
                scanf("%d", &treeChoice);
                if (treeChoice == 1) {
                    printf("Enter value to insert: ");
                    scanf("%d", &value);
                    root = insertTreeNode(root, value);
                } else if (treeChoice == 2) {
                    inOrderTraversal(root);
                    printf("\n");
                }
                break;
            }
            case 9: {
                int graph[5][5] = {
                    {0, 1, 0, 1, 0},
                    {1, 0, 1, 0, 0},
                    {0, 1, 0, 0, 1},
                    {1, 0, 0, 0, 1},
                    {0, 0, 1, 1, 0}
                };
                int visited[5] = {0};
                int start;
                printf("Enter starting node for DFS (0-4): ");
                scanf("%d", &start);
                DFS(graph, visited, start);
                printf("\nBFS: ");
                BFS(graph, start);
                printf("\n");
                break;
            }
            case 10: {
                memset(hashTable, -1, sizeof(hashTable)); // Initialize hash table
                int hashChoice, key;
                printf("1. Insert\n2. Display\nChoose operation: ");
                scanf("%d", &hashChoice);
                if (hashChoice == 1) {
                    printf("Enter key to insert: ");
                    scanf("%d", &key);
                    insertHash(key);
                } else if (hashChoice == 2) {
                    displayHashTable();
                }
                break;
            }
            case 0:
                exit(0);
            default:
                printf("Invalid choice. Try again.\n");
        }
    }

    return 0;
}
